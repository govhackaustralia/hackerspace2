<?php

function _invite_teammember(Drupal\Core\Entity\EntityInterface $entity)
{
// if is type team member, create new user for email
  if ($entity->getParagraphType()->id == 'team_member') {
    $email = $entity->field_email->value;
    $result = \Drupal::entityQuery('user')
      ->condition('mail', $email)
      ->execute();
    if (count($result) == 0) {
      $user = Drupal\user\Entity\User::create(array(
        'name' => $email,
        'mail' => $email
      ));
      $user->enforceIsNew();
      $user->save();
      _user_mail_notify('register_no_approval_required', $user);
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function hackerspace_paragraph_insert(Drupal\Core\Entity\EntityInterface $entity)
{
  _invite_teammember($entity);
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function hackerspace_paragraph_update(Drupal\Core\Entity\EntityInterface $entity)
{
  _invite_teammember($entity);
}

/**
 * Implements hook_node_access().
 */
function hackerspace_node_access($node, $op, $account)
{
  $roleObj = \Drupal\user\Entity\Role::load('authenticated');
  // if not my project, check if my email is in the team members of that project
  if ($account->id() != $node->getOwnerId()
    && $node->getType() == 'project'
    && $op == 'update'
    && $roleObj->hasPermission("edit own project content")
  ) {
    $result = \Drupal::entityQuery('paragraph')
      ->condition('type', 'team_member')
      ->condition('field_email', $account->getEmail())
      ->condition('parent_id', $node->id())
      ->execute();
    return Drupal\Core\Access\AccessResultAllowed::allowedIf(count($result) > 0);

  }

}

function _update_prizes_callback($form, $form_state)
{
  return $form['field_prizes'];
}

function hackerspace_form_alter(&$form, \Drupal\Core\Form\FormStateInterface &$form_state, $form_id)

  // insert ajax magic into project edit form
{
  if ($form_id == 'node_project_edit_form' || $form_id == 'node_project_form') {
    $form['#attached']['library'][] = 'core/drupal.ajax';
    $form['field_jurisdiction']['widget']['#ajax'] = [
      'callback' => '_update_prizes_callback',
      'wrapper' => 'prizes_wrapper',
      'event' => 'change'
    ];
    $form['field_prizes']['#prefix'] = '<div id="prizes_wrapper">';
    $form['field_prizes']['#suffix'] = '</div>';
  }

  if ($form_id == 'node_project_edit_form' || $form_id == 'node_project_form'
    || $form_id == 'user_login_form' || $form_id == 'user_pass') {
    $form['#attached']['library'][] = 'hackerspace/hackerspace_theme';
  }
}

function hackerspace_views_pre_view($view, $display_id, array &$args)
  // replaces tokens like [node:id] in views with their saved value or from the request
  // based on https://www.drupal.org/node/1699378#comment-11801999
{
  if ($view->display_handler->getType() === 'entity_reference') {
    $calling_abs_path = \Drupal::request()->server->get('HTTP_REFERER');
    $fake_request = \Symfony\Component\HttpFoundation\Request::create($calling_abs_path);
    $url_object = \Drupal::service('path.validator')->getUrlIfValid($fake_request->getRequestUri());

    if ($url_object) {
      $params = $url_object->getRouteParameters();
      $entity_type = key($params);
      if ($entity_type) {
        $entity = \Drupal::entityTypeManager()->getStorage($entity_type)->load($params[$entity_type]);

        $token_service = \Drupal::token();
        $options = array(
          'clear' => TRUE,
        );
        $data = array($entity_type => $entity);
        foreach ($args as $key => $arg) {
          # For AJAX requests, use the value from the request instead
          $field = str_replace(['[node:', ']'], '', $arg);
          if (!empty($field) && $value = $view->getRequest()->get($field)) {
            $args[$key] = $value;
          } else {
            $args[$key] = $token_service->replace($arg, $data, $options);
          }
        }
      }
    }
  }
}

function hackerspace_views_post_execute($view)
{
  if ($view->current_display == 'prizes_choose') {
    // $view->args[0] = event region/state
    if (isset($view->args[0])) {

      $jurisdiction_id = $view->args[0];
      $jurisdiction = \Drupal\taxonomy\Entity\Term::load($view->args[0]);
      foreach ($view->result as $i => $result) {

        $r = false;
        // national and jurisdiction prizes
        if (empty($result->_entity->get('field_jurisdiction')->getValue())) { // national or international, no location
          if ((!empty($jurisdiction) && $jurisdiction->get('name')->getValue()[0]['value'] != 'New Zealand') ||
            $result->_entity->get('field_international')->getValue()[0]['value'] == '1') {
            $r = true;
          }
        } else {
          foreach ($result->_entity->get('field_jurisdiction')->getValue() as $loc) {
            if ($loc['target_id'] == $jurisdiction_id) { // jurisdiction id matches
              $r = true;
            }
          }
        }

        //
        if (!$r) {
          unset($view->result[$i]);
        }
      }
    }
  }
}

function hackerspace_page_attachments(array &$page)
{

  $page['#attached']['html_head'][] = [
    // The data.
    [
      // The HTML tag to add, in this case a <script> tag.
      '#tag' => 'script',
      '#attributes' => array(
        'language' => "javascript",
        'type' => "text/javascript",
      ),
      '#value' => "var _prum = [['id', '5790b0a3abe53dd423d56a72'],
             ['mark', 'firstbyte', (new Date()).getTime()]];
              (function() {
                  var s = document.getElementsByTagName('script')[0]
                    , p = document.createElement('script');
                  p.async = 'async';
                  p.src = '//rum-static.pingdom.net/prum.min.js';
                  s.parentNode.insertBefore(p, s);
              })();",
    ],
    // A key, to make it possible to recognize this HTML <HEAD> element when altering.
    'pingdom-rum'
  ];
}
